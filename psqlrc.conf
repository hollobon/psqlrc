\set QUIET on

--------------------------------------------------------------------------------
-- psql config

SELECT version / 10000 || '.' || (version / 100) % 100 || '.' || version % 100 AS pg_version FROM (SELECT current_setting('server_version_num')::int AS version) v \gset

\set PROMPT1 '%m:%>(%:pg_version:) %n %/ %x%# '
\timing
\pset null (null)
\set ON_ERROR_ROLLBACK 'on'
\set COMP_KEYWORD_CASE upper

\setenv PSQL_EDITOR emacsclient
\setenv PSQL_EDITOR_LINENUMBER_ARG '+'

--------------------------------------------------------------------------------
-- server information

SELECT CASE WHEN current_setting('server_version_num')::int >= 90600 THEN 'pid, usename, datname, application_name, wait_event, wait_event_type, query_start, state' ELSE 'pid, usename, datname, application_name, waiting, query_start, state' END AS _activity_columns \gset

\set config 'SELECT name, CASE unit WHEN $$kB$$ THEN pg_size_pretty(setting::bigint * 1024) WHEN $$8kB$$ THEN pg_size_pretty(setting::bigint * 8192) ELSE setting || COALESCE(unit, $$$$) END AS setting, source FROM pg_settings WHERE source <> $$default$$;'

-- :actall -- show all connections
\set actall 'SELECT :_activity_columns, client_addr FROM pg_stat_activity ORDER BY datname, usename, application_name';

-- :act -- show non-idle connections
\set act 'SELECT :_activity_columns FROM pg_stat_activity WHERE state <> \'idle\'';

-- :actq -- show non-idle connections with query text
\set actq 'SELECT :_activity_columns, query FROM pg_stat_activity WHERE state <> \'idle\' ORDER BY query_start';

-- :slow -- show slow connections (active for over 30 seconds)
\set slow 'SELECT :_activity_columns FROM pg_stat_activity WHERE current_timestamp - query_start > interval \'30 seconds\' AND state = \'active\'';

-- :blk -- show blocked connections
\set blk 'SELECT :_activity_columns FROM pg_stat_activity WHERE waiting;'

-- :lck -- show pg_locks
\set lck 'TABLE pg_locks;'

-- :locks -- show detailed view of locks
\set locks 'SELECT CASE granted WHEN true THEN ''t'' ELSE ''*F*'' END || CASE WHEN fastpath THEN '' fp'' ELSE '''' END AS grnt, mode, locktype, CASE locktype WHEN ''relation'' THEN relation::regclass::text WHEN ''page'' THEN page::text WHEN ''tuple'' THEN relation::regclass || '' ('' || page::text || '','' || tuple::text || '')'' WHEN ''virtualxid'' THEN CASE WHEN virtualxid = virtualtransaction THEN ''(own)'' ELSE virtualxid::text END WHEN ''transactionid'' THEN transactionid::text || CASE WHEN mode = ''ExclusiveLock'' THEN '' (own)'' ELSE '''' END WHEN ''object'' THEN classid::regclass || '': '' || objid::text || '', '' || objsubid::text ELSE ''??'' || locktype END AS on, virtualtransaction as vxact, l.pid::text || CASE WHEN l.pid = pg_backend_pid() THEN ''*'' ELSE '''' END AS pid, sa.application_name, sa.usename, sa.state, sa.query_start FROM pg_locks l LEFT JOIN pg_stat_activity sa ON l.pid = sa.pid LEFT JOIN pg_database d ON l.database = d.oid WHERE d.datname = current_database() OR l.database = 0 OR l.database IS NULL ORDER BY l.pid, relation, locktype;'

-- :conn -- list connection count grouped by database and username
\set conn 'SELECT datname, usename, count(*), array_agg(DISTINCT client_addr) client_addrs, array_agg(application_name) application_names FROM pg_stat_activity GROUP BY datname, usename ORDER BY 1, 2';

-- :kill n; -- kill a backend
\set kill 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid = '

-- :uptime -- show postmaster uptime
\set uptime 'SELECT now() - pg_postmaster_start_time();'

-- :q PID; -- show query text for connection with pid = PID
\set q 'SELECT query FROM pg_stat_activity WHERE pid ='

-- :expall QUERY; -- run EXPLAIN ANALYZE with all options for QUERY
\set expall 'EXPLAIN (analyze, buffers, costs, timing, verbose) '

-- :su -- set role to superuser
\set su 'SET ROLE postgres;'

-- :rr -- RESET ROLE
\set rr 'RESET ROLE;'

--------------------------------------------------------------------------------
-- transaction control

\set b 'BEGIN;'

\set r 'ROLLBACK;'

\set beginser 'BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;'

\set beginrr 'BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;'

\set beginrc 'BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;'

--------------------------------------------------------------------------------
-- query utilities

\set loosescan 'WITH RECURSIVE t AS (SELECT min(:col) AS col FROM :tablename UNION ALL SELECT (SELECT min(:col) FROM :tablename WHERE :col > t.col) FROM t WHERE t.col IS NOT NULL) SELECT col FROM t WHERE col IS NOT NULL UNION ALL SELECT NULL WHERE EXISTS(SELECT * FROM :tablename WHERE :col IS NULL);'

-- get estimated row count for a table
-- usage:
-- > \set table 'public.mytable' \\ :count
\set count 'SELECT reltuples::int FROM pg_class WHERE oid = :''table''::regclass';

-- get a comma-delimited list of column names, quoted as necessary, for the table named in :table
-- usage:
-- > \set table pg_catalog.pg_class \set colprefix r \\ :columns
\set colprefix ''
\set columns 'SELECT array_to_string(array(SELECT CASE WHEN :''colprefix'' <> '''' THEN :''colprefix'' || ''.'' ELSE '''' END || quote_ident(attname) FROM pg_attribute WHERE attrelid = :''table''::regclass AND attnum > 0 AND NOT attisdropped ORDER BY attnum), '', '')';

\set QUIET off

\ir .psqlrc-local.conf